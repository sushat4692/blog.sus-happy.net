---
import BaseLayout from "../../../../layouts/BaseLayout.astro";
import { CollectionEntry, getCollection } from "astro:content";
import { slug } from "github-slugger";
import { PER_PAGE } from "../../../../const";
import PageMeta from "../../../../components/PageMeta.astro";
import Hero from "../../../../components/Hero.astro";
import Side from "../../../../components/Side.astro";
import ArchivePost from "../../../../components/ArchivePost.astro";
import type { GetStaticPathsOptions, Page } from "astro";

type Props = {
    page: Page<CollectionEntry<"blog">>;
    name: string;
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    const blogEntries = await getCollection("blog");
    const tags: string[] = [];

    blogEntries.map((entry) => {
        if (!entry.data.tags) {
            return;
        }

        entry.data.tags.map((tag) => {
            if (!tags.some((t) => t === tag)) {
                tags.push(tag);
            }
        });
    });

    const result = [];
    for (const tag of tags) {
        const allPosts = (
            await getCollection(
                "blog",
                (data) =>
                    Array.isArray(data.data.tags) &&
                    data.data.tags.some((t) => t === tag)
            )
        ).sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

        result.push(
            paginate(allPosts, {
                params: { slug: slug(tag) },
                props: { name: tag },
                pageSize: PER_PAGE,
            }).filter((page) => page.params.page)
        );
    }

    return result;
}

const { page, name } = Astro.props;
---

<BaseLayout>
    <PageMeta
        slot="head"
        title={`Page ${page.currentPage} - ${name} - Tags`}
        noindex
    />

    <main>
        <Hero title={`${name} - Page: ${page.currentPage}`} />

        <div class="l-container">
            <div class="c-archive">
                {page.data.map((post) => <ArchivePost post={post} />)}
            </div>

            <nav>
                <ul class="c-navigation has-sm-padding">
                    <li class="c-navigation__item">
                        <a
                            rel="prev"
                            href={page.currentPage === 2 ? "/" : page.url.prev}
                            class="c-navigation__anchor">PREV PAGE</a
                        >
                    </li>
                    {
                        page.url.next && (
                            <li class="c-navigation__item">
                                <a
                                    rel="next"
                                    href={page.url.next}
                                    class="c-navigation__anchor"
                                >
                                    NEXT PAGE
                                </a>
                            </li>
                        )
                    }
                </ul>
            </nav>
        </div>
    </main>

    <Side />
</BaseLayout>

<style lang="scss">
    .wrap {
        @apply grid grid-cols-1 gap-10 pb-8;
    }

    .nav {
        @apply flex gap-4 justify-start items-center py-8;

        &__item {
            @apply m-0;
        }
    }
</style>
